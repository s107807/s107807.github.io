from vex import *\n\n#imported libray: roboLib\n\nimport time, math\n\nerrorLog = []\n\n\ndef batteryDisplay(batteryDisplayLength = 10):\n    global batteryIcon, errorLog, batteryDisplayLength\n    try:\n        batteryIcon = '|'\n        for s in range(int(round(brain.battery.capacity()/batteryDisplayLength))):\n            batteryIcon = batteryIcon + '='\n        batteryIcon = batteryIcon + '}'\n    except:\n        if 'unknown error in function batteryDisplay' not in errorLog:\n            errorLog.append('unknown error in function batteryDisplay')\n\n\nbatteryLifeStartTime = time.time()\nbatteryLifeStartPercentage = brain.battery.capacity()\ncalculatedTimeInt = 1\ncalculatedTimeStr = 'Calculating...'\n\ndef batteryLifeETA(unit = 'temp'):\n    global errorLog, batteryLifeStartTime, batteryLifeStartPercentage, calculatedTimeInt, calculatedTimeStr\n    try:\n        if batteryLifeStartPercentage != brain.battery.capacity():\n            quickGrabTime = time.time()\n            if unit.lower() == 'sec':\n                calculatedTimeInt = brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime)\n                calculatedTimeStr = str(calculatedTimeInt) + 'secs'\n            if unit.lower() == 'min':\n                calculatedTimeInt = (brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime))/60\n                calculatedTimeStr = str(calculatedTimeInt) + 'mins'\n            if unit.lower() == 'hour':\n                calculatedTimeInt = ((brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime))/60)/60\n                calculatedTimeStr = str(calculatedTimeInt) + 'hrs'\n            else:\n                if brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime) >= 60:\n                    if brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime) >= 3600:\n                        calculatedTimeInt = ((brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime))/60)/60\n                        calculatedTimeStr = str(calculatedTimeInt) + 'hrs'\n                    else:\n                        calculatedTimeInt = (brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime))/60\n                        calculatedTimeStr = str(calculatedTimeInt) + 'mins'\n                else:\n                    calculatedTimeInt = brain.battery.capacity() * (quickGrabTime - batteryLifeStartTime)\n                    calculatedTimeStr = str(calculatedTimeInt) + 'secs'\n            batteryLifeStartTime = time.time()\n            batteryLifeStartPercentage = brain.battery.capacity()\n    except:\n        if 'unknown error in function batteryLifeETA' not in errorLog:\n            errorLog.append('unknown error in function batteryLifeETA')\n\n\nthrottleLog = []\n\ndef throttleCheck(motors, motorsString):\n    global errorLog, throttleLog\n    try:\n        for s in range(len(motors)):\n            if motors[s].temperature(PERCENT) >= 65:\n                if 'throttling found in ' + str(motorsString[s]) not in throttleLog:\n                    throttleLog.append('throttling found in ' + str(motorsString[s]))\n            else:\n                if 'throttling found in ' + str(motorsString[s]) in throttleLog:\n                    throttleLog.remove('throttling found in ' + str(motorsString[s]))\n    except:\n        if 'unknown error in function throttleCheck' not in errorLog:\n            errorLog.append('unknown error in function throttleCheck')\n\ndebugMode = False\n\ndef debugMenu(controllerName):\n    global debugMode\n    if controllerName.buttonDown.pressing() and controllerName.buttonB.pressing() and controllerName.buttonR1.pressing():\n        debugMode = not debugMode\n        wait(.5, SECONDS)\n    \n    if debugMode == True:\n        
